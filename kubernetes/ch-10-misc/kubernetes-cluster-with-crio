** Installing Kubernetes cluster on Ubuntu 20.04 using crio 1.18 and kubernetes version 1.18.0-00 **

Minimum 3 machines with 2-4 GiB of RAM & 1 vcpu.
All machines must have two NIC. One working in NAT (for Internet connection) and one Internal (for cluster communication)
Swap must be disabled on all machines
Update /etc/hosts, so all machines will be able to talk to each other using names

Names of machines:
Control - control.example.com -- 10.0.0.100
First Node - nodeone.example.com -- 10.0.0.1
Second Node - nodetwo.example.com -- 10.0.0.2

=== Configuring Kubernetes controller & Nodes - ON ALL MACHINES

#1 - Adding key
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

#2 - Adding kubernetes repo
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" >> /etc/apt/sources.list.d/kubernetes.list
apt-get update

#3 - Installing kubernetes components
Install kubeadm
  apt install -y kubeadm=1.18.0-00
Install kubectl
  apt install -y kubectl=1.18.0-00
Install cri-o
  modprobe overlay
  modprobe br_netfilter
Create a file /etc/sysctl.d/99-mykubernetes-cri.conf, with these contents
  net.bridge.bridge-nf-call-iptables  = 1
  net.ipv4.ip_forward                 = 1
  net.bridge.bridge-nf-call-ip6tables = 1
Run 
  sysctl --system
Now create two environment variables
  export OS=xUbuntu_20.04
  export VERSION=1.18

Adding repos for cri-o and install cri-o

  echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
  echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list
  curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key add -
  curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key add -
  apt update
  apt install cri-o cri-o-runc

Find container monitor and copy its path
  which conmon

Edit /etc/crio/crio.conf
  conmon = "/usr/bin/conmon"
  registries = [                     
        "docker.io",
        "quay.io",
  ]

Start crio and enable it
  systemctl daemon-reload
  systemctl enable crio
  systemctl start crio
  systemctl status crio
  
Install Kubelet. We need to tell kubelet that we are using "cri-o" as our container runtime, not docker.
Create a file /etc/default/kubelet, with these contents
  KUBELET_EXTRA_ARGS=--feature-gates="AllAlpha=false,RunAsGroup=true" --container-runtime=remote --cgroup-driver=systemd --container-runtime-endpoint='unix:///var/run/crio/crio.sock' --runtime-request-timeout=5m
 
Now install kubelet
  apt install -y kubelet=1.18.0-00
  
Install kubernetes-cni network
  apt-get install -y kubernetes-cni


==== ONLY ON KUBERNETES CONTROLLER

Initialize kubernetes controller
  kubeadm init --apiserver-advertise-address=10.0.0.100 --cri-socket=/var/run/crio/crio.sock --ignore-preflight-errors=all
 
[check for success message and run the commands mentioned in message]

=== Install overlay network - calico in our case

  curl https://docs.projectcalico.org/manifests/calico.yaml -O
  kubectl apply -f calico.yaml
  
Check the kubernetes control node status
  kubectl get nodes

======

Also copy the kubeadm join command to join nodes to kubernetes cluster
  kubeadm token create --print-join-command
  
